// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace pStudyWare20.Data.Models;

public partial class AMC_DBContext : DbContext
{
    public AMC_DBContext(DbContextOptions<AMC_DBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AMC_ChapterMaster> AMC_ChapterMasters { get; set; }

    public virtual DbSet<AMC_ClassMaster> AMC_ClassMasters { get; set; }

    public virtual DbSet<AMC_ClassSchedule> AMC_ClassSchedules { get; set; }

    public virtual DbSet<AMC_ClassType> AMC_ClassTypes { get; set; }

    public virtual DbSet<AMC_Country> AMC_Countries { get; set; }

    public virtual DbSet<AMC_ExamMaster> AMC_ExamMasters { get; set; }

    public virtual DbSet<AMC_ExamMasterAnswerKey> AMC_ExamMasterAnswerKeys { get; set; }

    public virtual DbSet<AMC_ExamMasterAnswerKey_2021> AMC_ExamMasterAnswerKey_2021s { get; set; }

    public virtual DbSet<AMC_ExamMasterAnswerKey_Bak> AMC_ExamMasterAnswerKey_Baks { get; set; }

    public virtual DbSet<AMC_ExamMaster_Bak> AMC_ExamMaster_Baks { get; set; }

    public virtual DbSet<AMC_ExamMaster_RowScoreLookup> AMC_ExamMaster_RowScoreLookups { get; set; }

    public virtual DbSet<AMC_ExamMaster_bak2021> AMC_ExamMaster_bak2021s { get; set; }

    public virtual DbSet<AMC_InstructorMaster> AMC_InstructorMasters { get; set; }

    public virtual DbSet<AMC_MailMerger> AMC_MailMergers { get; set; }

    public virtual DbSet<AMC_tblAccountPayable> AMC_tblAccountPayables { get; set; }

    public virtual DbSet<AMC_tblAccountReceivable> AMC_tblAccountReceivables { get; set; }

    public virtual DbSet<AMC_tblChannel> AMC_tblChannels { get; set; }

    public virtual DbSet<AMC_tblDocument> AMC_tblDocuments { get; set; }

    public virtual DbSet<AMC_tblDonor> AMC_tblDonors { get; set; }

    public virtual DbSet<AMC_tblEmailTracking> AMC_tblEmailTrackings { get; set; }

    public virtual DbSet<AMC_tblEnquiry> AMC_tblEnquiries { get; set; }

    public virtual DbSet<AMC_tblLookupSemester> AMC_tblLookupSemesters { get; set; }

    public virtual DbSet<AMC_tblMeetingSchedule> AMC_tblMeetingSchedules { get; set; }

    public virtual DbSet<AMC_tblNewsltr> AMC_tblNewsltrs { get; set; }

    public virtual DbSet<AMC_tblPostMessage> AMC_tblPostMessages { get; set; }

    public virtual DbSet<AMC_tblRegistration> AMC_tblRegistrations { get; set; }

    public virtual DbSet<AMC_tblReportCard> AMC_tblReportCards { get; set; }

    public virtual DbSet<AMC_tblReportCard_Bak> AMC_tblReportCard_Baks { get; set; }

    public virtual DbSet<AMC_tblSpecialEventsRegistration> AMC_tblSpecialEventsRegistrations { get; set; }

    public virtual DbSet<AMC_tblState> AMC_tblStates { get; set; }

    public virtual DbSet<AMC_tblStudent> AMC_tblStudents { get; set; }

    public virtual DbSet<AMC_tblStudentDocument> AMC_tblStudentDocuments { get; set; }

    public virtual DbSet<AMC_tblStudents_History> AMC_tblStudents_Histories { get; set; }

    public virtual DbSet<AMC_tblTestimonial> AMC_tblTestimonials { get; set; }

    public virtual DbSet<AMC_tblTimeTracking> AMC_tblTimeTrackings { get; set; }

    public virtual DbSet<AMC_tblTriangularRegistration> AMC_tblTriangularRegistrations { get; set; }

    public virtual DbSet<AMC_tblUser> AMC_tblUsers { get; set; }

    public virtual DbSet<AMC_tblUserNotificationToken> AMC_tblUserNotificationTokens { get; set; }

    public virtual DbSet<AMC_tblUserTracking> AMC_tblUserTrackings { get; set; }

    public virtual DbSet<AMC_tblVideo> AMC_tblVideos { get; set; }

    public virtual DbSet<AMC_tblVolunteersRequest> AMC_tblVolunteersRequests { get; set; }

    public virtual DbSet<Comment> Comments { get; set; }

    public virtual DbSet<EC_tblEnquiry> EC_tblEnquiries { get; set; }

    public virtual DbSet<MemberMaster> MemberMasters { get; set; }

    public virtual DbSet<MemberMasterBackup> MemberMasterBackups { get; set; }

    public virtual DbSet<MemberReference> MemberReferences { get; set; }

    public virtual DbSet<MemberType> MemberTypes { get; set; }

    public virtual DbSet<PageHitsCounter> PageHitsCounters { get; set; }

    public virtual DbSet<StudentLog> StudentLogs { get; set; }

    public virtual DbSet<SubjectMaster> SubjectMasters { get; set; }

    public virtual DbSet<course> courses { get; set; }

    public virtual DbSet<coursemembership> coursememberships { get; set; }

    public virtual DbSet<notificationslog> notificationslogs { get; set; }

    public virtual DbSet<notificationtemplate> notificationtemplates { get; set; }

    public virtual DbSet<pushhoken> pushhokens { get; set; }

    public virtual DbSet<temp> temps { get; set; }

    public virtual DbSet<upload1> upload1s { get; set; }

    public virtual DbSet<user> users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasDefaultSchema("AMCDevUser");

        modelBuilder.Entity<AMC_ChapterMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_ChapterMaster", "dbo");

            entity.HasIndex(e => e.ChapterID, "IDXC_AMC_ChapterMaster_ChapterID").IsClustered();

            entity.Property(e => e.Active).HasDefaultValue(false);
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.ChapterID).ValueGeneratedOnAdd();
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ContactEmail)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactPerson)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactPhone)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Emailsuffix)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Location)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PostalCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Program)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StartingDate).HasColumnType("datetime");
            entity.Property(e => e.State)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SupportEmail)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<AMC_ClassMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_ClassMaster", "dbo");

            entity.HasIndex(e => e.StudentID, "IDXC_AMCClassMaster_StudentID");

            entity.Property(e => e.ChangeBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChangeDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Class)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Section)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("A")
                .IsFixedLength();
            entity.Property(e => e.Semester)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<AMC_ClassSchedule>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_ClassSchedule", "dbo");

            entity.Property(e => e.Active).HasDefaultValue(false);
            entity.Property(e => e.ChangeBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChangeDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ClassDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RowID).ValueGeneratedOnAdd();
            entity.Property(e => e.Semester)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Session)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_ClassType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_ClassType", "dbo");

            entity.Property(e => e.Class)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClassName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("Admin");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.InstructorEmailGroup)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RowID).ValueGeneratedOnAdd();
            entity.Property(e => e.Section)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StudentEmailGroup)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_Country>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_Country", "dbo");

            entity.Property(e => e.CountryCode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CountryName)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_ExamMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_ExamMaster", "dbo");

            entity.Property(e => e.AnswerDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AnswerKey)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AnswerType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("M")
                .IsFixedLength();
            entity.Property(e => e.Category)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Class)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ExamType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RowID).ValueGeneratedOnAdd();
            entity.Property(e => e.Semester)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.mSession)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_ExamMasterAnswerKey>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_ExamMasterAnswerKey", "dbo");

            entity.Property(e => e.AnswerKey)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Class)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ExamType)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Semester)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Session)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_ExamMasterAnswerKey_2021>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_ExamMasterAnswerKey_2021", "dbo");

            entity.Property(e => e.AnswerKey)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Class)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ExamType)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Semester)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Session)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_ExamMasterAnswerKey_Bak>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_ExamMasterAnswerKey_Bak", "dbo");

            entity.Property(e => e.AnswerKey)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Class)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ExamType)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Semester)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Session)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_ExamMaster_Bak>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_ExamMaster_Bak", "dbo");

            entity.Property(e => e.AnswerDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AnswerKey)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AnswerType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("M")
                .IsFixedLength();
            entity.Property(e => e.Category)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Class)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ExamType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RowID).ValueGeneratedOnAdd();
            entity.Property(e => e.Semester)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.mSession)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_ExamMaster_RowScoreLookup>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_ExamMaster_RowScoreLookup", "dbo");

            entity.Property(e => e.Category)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ExamType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RowID).ValueGeneratedOnAdd();
            entity.Property(e => e.Semester)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Session)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_ExamMaster_bak2021>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_ExamMaster_bak2021", "dbo");

            entity.Property(e => e.AnswerDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AnswerKey)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AnswerType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("M")
                .IsFixedLength();
            entity.Property(e => e.Category)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Class)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ExamType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RowID).ValueGeneratedOnAdd();
            entity.Property(e => e.Semester)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.mSession)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_InstructorMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_InstructorMaster", "dbo");

            entity.Property(e => e.ChangeBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChangeDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Class)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ContactPhone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Section)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<AMC_MailMerger>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_MailMerger", "dbo");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DataValue1)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.DataValue2)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.DataValue3)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.DataValue5)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.DataValue6)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.EmailSendStatus).HasDefaultValue(false);
            entity.Property(e => e.EmailSendTo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EmailSubject)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.RowID).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<AMC_tblAccountPayable>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_tblAccountPayable", "dbo");

            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.ApID).ValueGeneratedOnAdd();
            entity.Property(e => e.ChangeBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChangeDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Comments)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Documents)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ExpenseType)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PayableTo)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentMode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_tblAccountReceivable>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_tblAccountReceivable", "dbo");

            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.ArID).ValueGeneratedOnAdd();
            entity.Property(e => e.ChangeBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChangeDate).HasColumnType("datetime");
            entity.Property(e => e.Comments)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Documents)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PayerType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentMode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_tblChannel>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_tblChannel", "dbo");

            entity.Property(e => e.ChannelID).ValueGeneratedOnAdd();
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Createdby)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Image)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Link)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_tblDocument>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_tblDocuments", "dbo");

            entity.Property(e => e.InsertDate).HasColumnType("datetime");
            entity.Property(e => e.mBatch)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.mDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.mDocID).ValueGeneratedOnAdd();
            entity.Property(e => e.mDocName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.mDocSession)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.mDocType)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("P")
                .IsFixedLength();
            entity.Property(e => e.mGrade)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.mSession)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.mTopics)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_tblDonor>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_tblDonors", "dbo");

            entity.Property(e => e.DonorID).ValueGeneratedOnAdd();
            entity.Property(e => e.DonorLevel)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DonorName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PostedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PostedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Semester)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_tblEmailTracking>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_tblEmailTracking", "dbo");

            entity.Property(e => e.ID).ValueGeneratedOnAdd();
            entity.Property(e => e.Message).IsRequired();
            entity.Property(e => e.SendBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SendDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.SendFrom)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SendTo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .IsFixedLength();
            entity.Property(e => e.Subject)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.UserType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<AMC_tblEnquiry>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__AMC_tblE__3214EC275993A6BB");

            entity.ToTable("AMC_tblEnquiry", "dbo");

            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.InsertDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Message)
                .IsRequired()
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_tblLookupSemester>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_tblLookupSemester", "dbo");

            entity.Property(e => e.AITotalSpace).HasDefaultValue(75);
            entity.Property(e => e.AMC10TotalSpace).HasDefaultValue(30);
            entity.Property(e => e.AMC12TotalSpace).HasDefaultValue(10);
            entity.Property(e => e.AMC8TotalSpace).HasDefaultValue(60);
            entity.Property(e => e.CurrentExamDueTime).HasColumnType("datetime");
            entity.Property(e => e.DSTotalSpace).HasDefaultValue(30);
            entity.Property(e => e.ID).ValueGeneratedOnAdd();
            entity.Property(e => e.InsertDate).HasColumnType("datetime");
            entity.Property(e => e.LastSemester)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MKTotalSpace).HasDefaultValue(300);
            entity.Property(e => e.NextSemester)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RegCloseDate).HasColumnType("datetime");
            entity.Property(e => e.RegStartDate).HasColumnType("datetime");
            entity.Property(e => e.RegistrationStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SemesterName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.semester)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_tblMeetingSchedule>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_tblMeetingSchedule", "dbo");

            entity.Property(e => e.AdminLogin)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AdminPassCode)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Class)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InsertDate).HasColumnType("datetime");
            entity.Property(e => e.MeetingID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.MeetingProviderURL)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.MeetingTime).HasPrecision(0);
            entity.Property(e => e.MeetingURL)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.Passcode)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RowID).ValueGeneratedOnAdd();
            entity.Property(e => e.Section)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UpdatedtDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<AMC_tblNewsltr>(entity =>
        {
            entity.HasKey(e => e.colLtrID).HasName("PK__AMC_tblN__F627CC8CAA38258F");

            entity.ToTable("AMC_tblNewsltr", "dbo");

            entity.Property(e => e.InsertDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RequestedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.colEmail)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_tblPostMessage>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_tblPostMessage", "dbo");

            entity.Property(e => e.Message).IsRequired();
            entity.Property(e => e.MessageID).ValueGeneratedOnAdd();
            entity.Property(e => e.PostedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PostedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<AMC_tblRegistration>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_tblRegistration", "dbo");

            entity.Property(e => e.ID).ValueGeneratedOnAdd();
            entity.Property(e => e.InsertDate).HasColumnType("datetime");
            entity.Property(e => e.Semester)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .IsFixedLength();
        });

        modelBuilder.Entity<AMC_tblReportCard>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_tblReportCard", "dbo");

            entity.HasIndex(e => e.mStudentID, "AMC_tblReportCard_mStudentID");

            entity.Property(e => e.InsertDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.mClass)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.mComments)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.mExamDate).HasColumnType("datetime");
            entity.Property(e => e.mGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.mReportCardID).ValueGeneratedOnAdd();
            entity.Property(e => e.mSection)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.mSemster)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.mType)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_tblReportCard_Bak>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_tblReportCard_Bak", "dbo");

            entity.HasIndex(e => e.mStudentID, "IDX_AMC_tblReportCard_mStudentID");

            entity.HasIndex(e => new { e.mStudentID, e.ChapterID }, "IDX_AMC_tblReportCard_mStudentID_ChapterID");

            entity.Property(e => e.InsertDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.mClass)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.mComments)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.mExamDate).HasColumnType("datetime");
            entity.Property(e => e.mGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.mReportCardID).ValueGeneratedOnAdd();
            entity.Property(e => e.mSection)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.mSemster)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.mType)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_tblSpecialEventsRegistration>(entity =>
        {
            entity.HasKey(e => e.RequestID).HasName("PK__AMC_tblS__33A8519A43C8EFCB");

            entity.ToTable("AMC_tblSpecialEventsRegistration", "dbo");

            entity.Property(e => e.ApprovalStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EventName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Grade)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.InsertDate).HasColumnType("datetime");
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Phone)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.School)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_tblState>(entity =>
        {
            entity.HasKey(e => e.colStateID).HasName("PK__AMC_tblS__105F5A4DE4924D42");

            entity.ToTable("AMC_tblStates", "dbo");

            entity.Property(e => e.colAbbriviation)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.colStateName)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_tblStudent>(entity =>
        {
            entity.HasKey(e => e.colStudentID).HasName("IDXC_AMC_tblStudents_colStudentID");

            entity.ToTable("AMC_tblStudents", "dbo");

            entity.HasIndex(e => e.colStudentFName, "IDX_AMC_tblStudents_colStudentFName");

            entity.HasIndex(e => new { e.colStudentID, e.ChapterID }, "IDX_AMC_tblStudents_colStudentID_ChapterID");

            entity.HasIndex(e => new { e.colStudentID, e.colParentID }, "IDX_AMC_tblStudents_colStudentID_colParentID");

            entity.Property(e => e.ColEventLocation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("O")
                .IsFixedLength();
            entity.Property(e => e.InsertDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LiabilitySignature)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RegisteredDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RegistrationPriority).HasDefaultValue(0);
            entity.Property(e => e.RequestedLocation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RuleSignature)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SignatureDate).HasColumnType("datetime");
            entity.Property(e => e.WaitingListStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .IsFixedLength();
            entity.Property(e => e.colStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("W")
                .IsFixedLength();
            entity.Property(e => e.colStudentEmail)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.colStudentEnrolledSession)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.colStudentFName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.colStudentGrade)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.colStudentLName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.colStudentPicPerm)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("n")
                .IsFixedLength();
            entity.Property(e => e.colStudentSchool)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.colStudentstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("a")
                .IsFixedLength();

            entity.HasOne(d => d.colParent).WithMany(p => p.AMC_tblStudents)
                .HasForeignKey(d => d.colParentID)
                .HasConstraintName("FK__AMC_tblSt__colPa__40058253");
        });

        modelBuilder.Entity<AMC_tblStudentDocument>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_tblStudentDocuments", "dbo");

            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.InsertDate).HasColumnType("datetime");
            entity.Property(e => e.Type)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.mDocID).ValueGeneratedOnAdd();
            entity.Property(e => e.mDocName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_tblStudents_History>(entity =>
        {
            entity.HasKey(e => e.colStudentID).HasName("PK__AMC_tblS__CEE8053ADE7D8633");

            entity.ToTable("AMC_tblStudents_History", "dbo");

            entity.Property(e => e.colStudentID).ValueGeneratedNever();
            entity.Property(e => e.ColEventLocation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InsertDate).HasColumnType("datetime");
            entity.Property(e => e.LiabilitySignature)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.RegisteredDate).HasColumnType("datetime");
            entity.Property(e => e.RuleSignature)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.colStudentEmail)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.colStudentEnrolledSession)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.colStudentFName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.colStudentGrade)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.colStudentLName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.colStudentPicPerm)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.colStudentSchool)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.colStudentstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<AMC_tblTestimonial>(entity =>
        {
            entity.HasKey(e => e.colTestID).HasName("PK__AMC_tblT__64BA11DFF98AD66D");

            entity.ToTable("AMC_tblTestimonials", "dbo");

            entity.Property(e => e.InsertDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.colTestEmail)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.colTestMessage)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.colTestUser)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_tblTimeTracking>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_tblTimeTracking", "dbo");

            entity.Property(e => e.Approved).HasDefaultValue(false);
            entity.Property(e => e.Comments)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DateVolunteer).HasColumnType("datetime");
            entity.Property(e => e.LogId).ValueGeneratedOnAdd();
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.TaskDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TaskName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_tblTriangularRegistration>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_tblTriangularRegistration", "dbo");

            entity.Property(e => e.Country)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.InsertDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RowiID).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<AMC_tblUser>(entity =>
        {
            entity.HasKey(e => e.coluserID).HasName("IDXC_AMC_tblUsers_colUserID");

            entity.ToTable("AMC_tblUsers", "dbo");

            entity.HasIndex(e => e.coluserEmail, "IDX_AMC_tblUsers_coluserEmail");

            entity.Property(e => e.InsertDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RegisteredDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.colParentEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.colSecurelvl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("p")
                .IsFixedLength();
            entity.Property(e => e.coluserAddress)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.coluserCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.coluserCountry)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.coluserEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.coluserPhNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.coluserState)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.coluserStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("a")
                .IsFixedLength();
            entity.Property(e => e.coluserZip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.coluserfName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.coluserlName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_tblUserNotificationToken>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_tblUserNotificationToken", "dbo");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeviceIdiom)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeviceManufacturer)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DeviceModel)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DevicePlatform)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeviceToken)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DeviceType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DeviceVersion)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ID).ValueGeneratedOnAdd();
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UserName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_tblUserTracking>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_tblUserTracking", "dbo");

            entity.Property(e => e.IPAddress)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LoginDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RowID).ValueGeneratedOnAdd();
            entity.Property(e => e.UserName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UserType)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AMC_tblVideo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMC_tblVideos", "dbo");

            entity.Property(e => e.InsertDate).HasColumnType("datetime");
            entity.Property(e => e.mBatch)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.mDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.mSemester)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.mSession)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.mTopics)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.mURLName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.mvideoID).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<AMC_tblVolunteersRequest>(entity =>
        {
            entity.HasKey(e => e.RequestID).HasName("PK__AMC_tblV__33A8519A2281FB69");

            entity.ToTable("AMC_tblVolunteersRequest", "dbo");

            entity.Property(e => e.Approved).HasDefaultValue(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Comments)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EnrolledSession)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Grade)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.InsertDate).HasColumnType("datetime");
            entity.Property(e => e.Interest)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Phone)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.School)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Comment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Comments", "dbo");

            entity.Property(e => e.DeleteBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeleteDate).HasColumnType("datetime");
            entity.Property(e => e.EmailID)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.pCommentID).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<EC_tblEnquiry>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__EC_tblEn__3214EC279DC91121");

            entity.ToTable("EC_tblEnquiry", "dbo");

            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.InsertDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Message)
                .IsRequired()
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MemberMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MemberMaster", "dbo");

            entity.HasIndex(e => e.UserName, "IDXC_AMC_MemberMaster_UserName").IsClustered();

            entity.Property(e => e.ChangeBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChangeDate).HasColumnType("datetime");
            entity.Property(e => e.ClassAccess)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .IsFixedLength();
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.EmailID)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastActiveDate).HasColumnType("datetime");
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MemberType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuperUser)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.pMemberID).ValueGeneratedOnAdd();
            entity.Property(e => e.systemAdmin)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .IsFixedLength();
        });

        modelBuilder.Entity<MemberMasterBackup>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MemberMasterBackup", "dbo");

            entity.Property(e => e.ChangeBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChangeDate).HasColumnType("datetime");
            entity.Property(e => e.ClassAccess)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("A")
                .IsFixedLength();
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.EmailID)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastActiveDate).HasColumnType("datetime");
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MemberType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.systemAdmin)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .IsFixedLength();
        });

        modelBuilder.Entity<MemberReference>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MemberReference", "dbo");
        });

        modelBuilder.Entity<MemberType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MemberType", "dbo");

            entity.Property(e => e.MemberTypeCd)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.MemberTypeDesc)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.pMemberTypeID).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<PageHitsCounter>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PageHitsCounter", "dbo");
        });

        modelBuilder.Entity<StudentLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("StudentLog", "dbo");

            entity.Property(e => e.Chapter)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.EntryDate).HasColumnType("datetime");
            entity.Property(e => e.ModfiedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.Subject)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Summary)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.pStudentLogId).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<SubjectMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SubjectMaster", "dbo");

            entity.Property(e => e.Subject)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SubjectID).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<course>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__courses__3213E83FDBC7820C");

            entity.Property(e => e.id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.created_at)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.description).HasColumnType("text");
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<coursemembership>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__courseme__3213E83F08F47D17");

            entity.Property(e => e.id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.created_at)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.course).WithMany(p => p.coursememberships)
                .HasForeignKey(d => d.course_id)
                .HasConstraintName("FK__coursemem__cours__3DE82FB7");

            entity.HasOne(d => d.user).WithMany(p => p.coursememberships)
                .HasForeignKey(d => d.user_id)
                .HasConstraintName("FK__coursemem__user___3CF40B7E");
        });

        modelBuilder.Entity<notificationslog>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__notifica__3213E83F1DF38DFB");

            entity.Property(e => e.id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.created_at)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.created_by)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.mode)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.recipient)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.sent_at).HasColumnType("datetime");
        });

        modelBuilder.Entity<notificationtemplate>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__notifica__3213E83F76C93682");

            entity.Property(e => e.id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.created_at)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.mode)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.recipient)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<pushhoken>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__pushhoke__3213E83FED5A93E2");

            entity.Property(e => e.id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.created_at)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.device_info).HasColumnType("text");
            entity.Property(e => e.token)
                .IsRequired()
                .HasColumnType("text");

            entity.HasOne(d => d.user).WithMany(p => p.pushhokens)
                .HasForeignKey(d => d.user_id)
                .HasConstraintName("FK__pushhoken__user___345EC57D");
        });

        modelBuilder.Entity<temp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temp", "dbo");

            entity.Property(e => e.Exam_date_)
                .HasColumnType("datetime")
                .HasColumnName("Exam date ");
            entity.Property(e => e.Group).HasMaxLength(255);
            entity.Property(e => e.Stdent_Id).HasColumnName("Stdent Id");
            entity.Property(e => e.Total_Points).HasColumnName("Total Points");
            entity.Property(e => e.type).HasMaxLength(255);
        });

        modelBuilder.Entity<upload1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("upload1", "dbo");

            entity.Property(e => e.Exam_date_)
                .HasColumnType("datetime")
                .HasColumnName("Exam date ");
            entity.Property(e => e.Group).HasMaxLength(255);
            entity.Property(e => e.Stdent_Id).HasColumnName("Stdent Id");
            entity.Property(e => e.Total_Points).HasColumnName("Total Points");
            entity.Property(e => e.comment).HasMaxLength(255);
            entity.Property(e => e.type).HasMaxLength(255);
        });

        modelBuilder.Entity<user>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__users__3213E83F6AB67ADC");

            entity.Property(e => e.id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.created_at)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.email)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.role)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}